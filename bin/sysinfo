#!/bin/sh

#############
# Functions #
#############

getColor() {
	if [[ -n "$1" ]]; then
		if [[ ${BASH_VERSINFO[0]} -ge 4 ]]; then
			if [[ ${BASH_VERSINFO[0]} -eq 4 && ${BASH_VERSINFO[1]} -gt 1 ]] || [[ ${BASH_VERSINFO[0]} -gt 4 ]]; then
				tmp_color=${1,,}
			else
				tmp_color="$(tr '[:upper:]' '[:lower:]' <<< ${1})"
			fi
		else
			tmp_color="$(tr '[:upper:]' '[:lower:]' <<< ${1})"
		fi
		case "${tmp_color}" in
			'black')		color_ret='\033[0m\033[30m';;
			'red')			color_ret='\033[0m\033[31m';;
			'green')		color_ret='\033[0m\033[32m';;
			'brown')		color_ret='\033[0m\033[33m';;
			'blue')			color_ret='\033[0m\033[34m';;
			'purple')		color_ret='\033[0m\033[35m';;
			'cyan')			color_ret='\033[0m\033[36m';;
			'light grey')	color_ret='\033[0m\033[37m';;
			'dark grey')	color_ret='\033[0m\033[1;30m';;
			'light red')	color_ret='\033[0m\033[1;31m';;
			'light green')	color_ret='\033[0m\033[1;32m';;
			'yellow')		color_ret='\033[0m\033[1;33m';;
			'light blue')	color_ret='\033[0m\033[1;34m';;
			'light purple')	color_ret='\033[0m\033[1;35m';;
			'light cyan')	color_ret='\033[0m\033[1;36m';;
			'white')		color_ret='\033[0m\033[1;37m';;
			# Some 256 colors
			'orange') color_ret="$(colorize '202')";;
			# HaikuOS
			'black_haiku') color_ret="$(colorize '7')";;
		esac
		[[ -n "${color_ret}" ]] && echo "${color_ret}"
	else
		:
	fi
}

#############
# Variables #
#############

FULL=━
EMPTY=━
name=$USER
host=`hostname`
battery=/sys/class/power_supply/BAT0
distro="Arch Linux"
kernel=`uname -r`
pkgs=`pacman -Qqs | wc -l`
wm='i3wm'
shell="${SHELL##*/}"
bdayclean="$(date -d"$(ls -alct --full-time / | awk '/lost\+found/ {printf  $6 " " $7}')" "+%d %b %Y %k:%M")"
uptimePrefix="up "
uptime=$( uptime -p | sed "s/^$uptimePrefix//")
if pgrep "mocp" > /dev/null; then
	mocpstate=$(mocp -Q "%state")
	mocpplaying=$(mocp -Q "%artist - %song")
fi


printf "\e[1;36m "
cat << 'EOF'

                                      -`
                                     .o+`            
                                    `ooo/            
                                   `+oooo:           
                                  `+oooooo:          
                                  -+oooooo+:          
                                `/:-:++oooo+:        
                               `/++++/+++++++:       
                              `/++++++++++++++:      
                             `/+++ooooooooooooo/`        
                            ./ooosssso++osssssso+`       
                           .oossssso-````/ossssss+`      
                          -osssssso.      :ssssssso.     
                         :osssssss/        osssso+++.    
                        /ossssssss/        +ssssooo/-    
                      `/ossssso+/:-        -:/+osssso+-  
                     `+sso+:-\`                 `.-/+oso: 
                    `++:.                           `-/+/
                    .`                                 `/

EOF

###########################
# Function to draw status #
###########################
draw()
{
  perc=$1
  size=$2
  inc=$(( perc * size / 100 ))
  out=
  if [ -z $3 ]
  then
	  color="37"
  else
    color="$3"
  fi 
  for v in `seq 0 $(( size - 1 ))`; do
    test "$v" -le "$inc"   \
    && out="${out}\e[1;${color}m${FULL}" \
    || out="${out}\e[0;${color}m${EMPTY}"
  done
  printf $out
}
########################
# Print pc information #
########################
printf " \e[0m\n"
i=0
while [ $i -le 19 ] 
do
  printf "████"
  i=$(($i+1))
done
printf " \e[0m\n\n"
printf " \e[1;36m  Distro:   \e[0m$distro\n"
printf " \e[1;36m  Kernel:   \e[0m$kernel\n"
printf " \e[1;36m  Birthday: \e[0m$bdayclean\n"
printf " \e[1;36m  Packages: \e[0m$pkgs\n"
printf " \e[1;36m  Shell:    \e[0m$shell\n"
printf " \e[1;36m  WM:       \e[0m$wm\n"
printf " \e[1;36m  Uptime:   \e[0m$uptime\n"
if [ "${mocpstate}" == "PLAY" ]; then
	printf " \e[1;36m  Song:     \e[0m$mocpplaying\n"
fi
printf "\e[0m\n"
i=0
while [ $i -le 19 ] 
do
printf "████"
  i=$(($i+1))
done
printf " \e[0m\n\n"
#######################
# Print pc statistics #
#######################
#cpu=$(grep 'cpu ' /proc/stat | awk '{usage=($2+$4)*100/($2+$4+$5)} END {print usage}')
#c_lvl=`printf "%.0f" $(grep 'cpu ' /proc/stat | awk '{usage=($2+$4)*100/($2+$4+$5)} END {print usage}')`
#printf "   \e[1;36m%-4s \e[0m%-5s %-25s \n" "CPU: " "$c_lvl%" `draw $c_lvl 15` 
ram=`free | awk '/Mem:/ {print int($3/$2 * 100.0)}'`
printf "   \e[1;36m%-4s \e[0m%-5s %-25s \n" "RAM: " "$ram%" `draw $ram 15` 
b_full=$battery/energy_full
b_now=$battery/energy_now
bf=`cat $b_full`
bn=`cat $b_now`
charge=`printf $(( 100 * $bn / $bf ))`
printf "   \e[1;36m%-4s \e[0m%-5s %-25s \n" "Bat: " "$charge%" `draw $charge 15 $color`
vol=$(amixer get Master | grep -E -o  '[0-9]{1,3}?%' | cut -d% -f1 | head -n1)
printf "   \e[1;36m%-4s \e[0m%-5s %-25s \n" "Vol: " "$vol%" `draw $vol 15 $color` 
temp=`sensors | awk '/Physical\ id\ 0/ {gsub(/\+/,"",$4); gsub(/\..+/,"",$4)    ; print $4}'`
printf "   \e[1;36m%-4s \e[0m%-5s %-25s \n" "Temp:" "$temp°c " `draw $temp 15 $color`
