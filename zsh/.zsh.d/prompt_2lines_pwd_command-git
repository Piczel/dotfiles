local text=${1:-'red'}
local punctuation=${2:-'blue'}


SPROMPT='zsh: correct %F{red}%R%f to %F{green}%r%f [nyae]? '



#################
# Adapted from code found at <https://gist.github.com/1712320>.

setopt prompt_subst
autoload -U colors && colors # Enable colors in prompt

# Modify the colors and symbols in these variables as desired.
GIT_PROMPT_SYMBOL="%{$fg[blue]%}±"
GIT_PROMPT_PREFIX="%{$fg[green]%}%{$reset_color%}"
GIT_PROMPT_SUFFIX="%{$fg[green]%}%{$reset_color%}"
GIT_PROMPT_AHEAD="%{$fg[red]%}ANUM%{$reset_color%}"
GIT_PROMPT_BEHIND="%{$fg[cyan]%}BNUM%{$reset_color%}"
GIT_PROMPT_MERGING="%{$fg_bold[magenta]%}⚡︎%{$reset_color%}"
GIT_PROMPT_UNTRACKED="%{$fg_bold[red]%}● %{$reset_color%}"
GIT_PROMPT_MODIFIED="%{$fg_bold[yellow]%}● %{$reset_color%}"
GIT_PROMPT_STAGED="%{$fg_bold[green]%}● %{$reset_color%}"

# Show Git branch/tag, or name-rev if on detached head
parse_git_branch() {
  (git symbolic-ref -q HEAD || git name-rev --name-only --no-undefined --always HEAD) 2> /dev/null
}

# Show different symbols as appropriate for various Git repository states
parse_git_state() {

  # Compose this value via multiple conditional appends.
  local GIT_STATE=""

  local NUM_AHEAD="$(git log --oneline @{u}.. 2> /dev/null | wc -l | tr -d ' ')"
  if [ "$NUM_AHEAD" -gt 0 ]; then
    GIT_STATE=$GIT_STATE${GIT_PROMPT_AHEAD//NUM/$NUM_AHEAD}
  fi

  local NUM_BEHIND="$(git log --oneline ..@{u} 2> /dev/null | wc -l | tr -d ' ')"
  if [ "$NUM_BEHIND" -gt 0 ]; then
    GIT_STATE=$GIT_STATE${GIT_PROMPT_BEHIND//NUM/$NUM_BEHIND}
  fi

  local GIT_DIR="$(git rev-parse --git-dir 2> /dev/null)"
  if [ -n $GIT_DIR ] && test -r $GIT_DIR/MERGE_HEAD; then
    GIT_STATE=$GIT_STATE$GIT_PROMPT_MERGING
  fi

  if [[ -n $(git ls-files --other --exclude-standard 2> /dev/null) ]]; then
    GIT_STATE=$GIT_STATE$GIT_PROMPT_UNTRACKED
  fi

  if ! git diff --quiet 2> /dev/null; then
    GIT_STATE=$GIT_STATE$GIT_PROMPT_MODIFIED
  fi

  if ! git diff --cached --quiet 2> /dev/null; then
    GIT_STATE=$GIT_STATE$GIT_PROMPT_STAGED
  fi

  if [[ -n $GIT_STATE ]]; then
    echo "$GIT_PROMPT_PREFIX$GIT_STATE$GIT_PROMPT_SUFFIX"
  fi

}

# If inside a Git repository, print its branch and state
git_prompt_string() {
  local git_where="$(parse_git_branch)"
  [ -n "$git_where" ] && echo "$GIT_PROMPT_SYMBOL$(parse_git_state)$GIT_PROMPT_PREFIX%{$fg[yellow]%}${git_where#(refs/heads/|tags/)}$GIT_PROMPT_SUFFIX"
}

# Set the right-hand prompt
RPS1='$(git_prompt_string)'


################

###
# colors in tty
###
if [ "$TERM" = "linux" ]; then
  echo -en "\e]P0161616" # black dark
  #echo -en "\e]P8363636" # black light
  #echo -en "\e]P1dc322f" # red dark
  #echo -en "\e]P9cb4b16" # red light
  #echo -en "\e]P2859900" # green dark
  #echo -en "\e]PA1Aff28" # green light
  #echo -en "\e]P3b58900" # yellow dark
  #echo -en "\e]PBfff200" # yellow light
  echo -en "\e]P4268bd2" # blue dark
  echo -en "\e]PC0073ff" # blue light
  #echo -en "\e]P5d33682" # magenta dark
  #echo -en "\e]PD6c71c4" # magenta light
  #echo -en "\e]P62aa198" # cyan dark
  #echo -en "\e]PE00e6ff" # cyan light
  #echo -en "\e]P7eee8d5" # white dark
  #echo -en "\e]PFfdf6e3" # white light

	PROMPT="%F{$cyan}%~ %F{$red}> %f"
  clear # against bg artifacts
else
	PROMPT="%F{8}%~ $prompt_newline── %f"
	#PROMPT="%F{8}%~ $prompt_newline▶%F{1}▶%f▶ %f"
	#PROMPT="$fg_no_bold[cyan]%~$prompt_newline%f "

fi



export LESS_TERMCAP_mb=$'\e[0;33m'
export LESS_TERMCAP_md=$'\e[0;34m'
export LESS_TERMCAP_me=$'\e[0m'
export LESS_TERMCAP_se=$'\e[0m'
export LESS_TERMCAP_so=$'\e[1;34;30m'
export LESS_TERMCAP_ue=$'\e[0m'
export LESS_TERMCAP_us=$'\e[0;31m'

# vim: ft=sh:
